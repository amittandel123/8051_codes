C51 COMPILER V9.06   ALARM_THERMO                                                          05/05/2012 11:24:07 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE ALARM_THERMO
OBJECT MODULE PLACED IN alarm_thermo.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE alarm_thermo.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // Program to make a digital clock with integrated Alarm and digital thermometer
   2          #include<reg51.h>
   3          #define port P1
   4          #define adc_input P0
   5          #define cont_port P3
   6          #define dataport P2
   7          #define m_sec 10
   8          sbit rs = cont_port^0;
   9          sbit rw = cont_port^1;
  10          sbit en = cont_port^6;
  11          sbit dig_hr1=port^0;
  12          sbit dig_min1=port^1;
  13          sbit start=port^2;
  14          sbit am_pm=port^3;
  15          sbit alarm_set=port^4;
  16          sbit alarm=port^7;
  17          sbit wr= P3^2;
  18          sbit rd= P3^3;
  19          sbit intr= P3^4;
  20          
  21          int hr ,hr1=0,alarm_hr=0;
  22          int min,min1=0,alarm_min=0;
  23          int sec,sec1=0,dig_am_pm=0,alarm_am_pm=0;
  24          int test_final=0,test_intermediate1[10],test_intermediate2[3]={0,0,0};
  25          
  26          void delay(unsigned int msec) // Time dealy function
  27          {
  28   1              int i,j ;
  29   1              for(i=0;i<msec;i++)
  30   1                for(j=0;j<1275;j++);
  31   1      }
  32          
  33          void lcd_cmd(unsigned char item)  //Function to send command to LCD           
  34          {
  35   1              dataport = item;
  36   1              rs= 0;
  37   1              rw=0;
  38   1              en=1;
  39   1              delay(1);
  40   1              en=0;
  41   1              return;
  42   1      }
  43          
  44          void lcd_data(unsigned char item) // Function to send data to LCD
  45          {
  46   1              dataport = item;
  47   1              rs= 1;
  48   1              rw=0;
  49   1              en=1;
  50   1              delay(1);
  51   1              en=0;
  52   1              return;
  53   1      }
  54          
  55          void lcd_data_string(unsigned char *str) // Function to send string to LCD
C51 COMPILER V9.06   ALARM_THERMO                                                          05/05/2012 11:24:07 PAGE 2   

  56          {
  57   1              int i=0;
  58   1              while(str[i]!='\0')
  59   1              {
  60   2                        lcd_data(str[i]);
  61   2                        i++;
  62   2                        delay(1);
  63   2              }
  64   1              return;
  65   1      }
  66          
  67          lcd_data_int(int time_val)  // Function to send number to LCD
  68          {
  69   1              int int_amt;
  70   1              int_amt=time_val/10;
  71   1              lcd_data(int_amt+48);
  72   1              int_amt=time_val%10; 
  73   1              lcd_data(int_amt+48);
  74   1              return;
  75   1      }
  76          
  77          void lcd(unsigned char str1[10])
  78          {
  79   1              lcd_cmd(0x38); 
  80   1              lcd_cmd(0x0e); 
  81   1              delay(1);
  82   1              lcd_data_string(str1);
  83   1      }
  84          
  85          void shape()  // Function to create the shape of degree
  86          {
  87   1              lcd_cmd(64);
  88   1              lcd_data(2);
  89   1              lcd_data(5);
  90   1              lcd_data(2);
  91   1              lcd_data(0);
  92   1              lcd_data(0);
  93   1              lcd_data(0);
  94   1              lcd_data(0);
  95   1              lcd_data(0);
  96   1      }
  97          
  98          void convert()  // Function to convert the data of ADC
  99          {
 100   1              int s;
 101   1              s=test_final/100;
 102   1              test_final=test_final%100;
 103   1              lcd_cmd(0xc9);
 104   1              if(s!=0)
 105   1                      lcd_data(s+48);
 106   1              else
 107   1                      lcd_cmd(0x06);
 108   1              s=test_final/10;
 109   1              test_final=test_final%10;
 110   1              lcd_data(s+48);
 111   1              lcd_data(test_final+48);
 112   1              lcd_data(0);
 113   1              lcd_data('C');
 114   1              lcd_data(' ');
 115   1              delay(2);
 116   1      }
 117          
C51 COMPILER V9.06   ALARM_THERMO                                                          05/05/2012 11:24:07 PAGE 3   

 118          void set_hr1()  // Function to set set hours digit of clock
 119          {
 120   1              hr1++;
 121   1              if(hr1>11)
 122   1                      hr1=0;
 123   1              lcd_cmd(0xc3);
 124   1              lcd_data_int(hr1);
 125   1              lcd_data(':');
 126   1      }
 127          
 128          void set_min1()  // Function to set set minutes digit of clock
 129          {
 130   1              min1++;
 131   1              if(min1>59)
 132   1                      min1=0;
 133   1              lcd_cmd(0xc6);
 134   1              lcd_data_int(min1);
 135   1      }
 136          
 137          void set_alarm_hr1() // Function to set set hours digit of alarm
 138          {
 139   1              alarm_hr++;
 140   1              if(alarm_hr>11)
 141   1                      alarm_hr=0;
 142   1              lcd_cmd(0xc3);
 143   1              lcd_data_int(alarm_hr);
 144   1              lcd_data(':');
 145   1      }
 146          
 147          void set_alarm_min1() // Function to set set minutes digit of clock
 148          {
 149   1              alarm_min++;
 150   1              if(alarm_min>59)
 151   1                      alarm_min=0;
 152   1              lcd_cmd(0xc6);
 153   1              lcd_data_int(alarm_min);
 154   1      }
 155          
 156          void alarm_check()  // Function to check alarm
 157          {
 158   1              if(hr==alarm_hr)
 159   1              {
 160   2                      if(min==alarm_min)
 161   2                      {
 162   3                              if(dig_am_pm==alarm_am_pm)
 163   3                              {
 164   4                                      alarm=1;
 165   4                                      lcd_cmd(0x8b);
 166   4                                      lcd("ALARM");
 167   4                              }
 168   3                      }
 169   2              } 
 170   1      }
 171          
 172          void temp() // Function to calculate temperature
 173          {
 174   1              int i;
 175   1              for(i=0;i<10;i++)
 176   1              {
 177   2                      delay(1);
 178   2                      rd=1;
 179   2                      wr=0;
C51 COMPILER V9.06   ALARM_THERMO                                                          05/05/2012 11:24:07 PAGE 4   

 180   2                      delay(1);
 181   2                      wr=1;
 182   2                      while(intr==1);
 183   2                      rd=0;
 184   2                      lcd_cmd(0x88);
 185   2                      test_intermediate1[i]=adc_input/10;
 186   2                      delay(1);
 187   2                      intr=1;
 188   2              }
 189   1              for(i=0;i<10;i++)
 190   1                      test_intermediate2[0]=test_intermediate1[i]+test_intermediate2[0];
 191   1              for(i=0;i<10;i++)
 192   1              {
 193   2                      delay(1);
 194   2                      rd=1;
 195   2                      wr=0;
 196   2                      delay(1);
 197   2                      wr=1;
 198   2                      while(intr==1);
 199   2                      rd=0;
 200   2                      lcd_cmd(0x88);
 201   2                      test_intermediate1[i]=adc_input/10;
 202   2                      delay(1);
 203   2                      intr=1;
 204   2              }
 205   1              for(i=0;i<10;i++)
 206   1                      test_intermediate2[1]=test_intermediate1[i]+test_intermediate2[1];
 207   1              for(i=0;i<10;i++)
 208   1              {
 209   2                      delay(1);
 210   2                      rd=1;
 211   2                      wr=0;
 212   2                      delay(1);
 213   2                      wr=1;
 214   2                      while(intr==1);
 215   2                      rd=0;
 216   2                      lcd_cmd(0x88);
 217   2                      test_intermediate1[i]=adc_input/10;
 218   2                      delay(1);
 219   2                      intr=1;
 220   2              }
 221   1              for(i=0;i<10;i++)
 222   1                      test_intermediate2[2]=test_intermediate1[i]+test_intermediate2[2];
 223   1              test_intermediate2[0]=test_intermediate2[0]/3;
 224   1              test_intermediate2[1]=test_intermediate2[1]/3;
 225   1              test_intermediate2[2]=test_intermediate2[2]/3;
 226   1              test_final=test_intermediate2[0]+test_intermediate2[1]+test_intermediate2[2];
 227   1              shape();
 228   1              convert();
 229   1      }
 230          
 231          void main()
 232          {
 233   1              int k;
 234   1              start=1;
 235   1              dig_hr1=1;
 236   1              dig_min1=1;
 237   1              alarm_set=1;
 238   1              alarm=0;
 239   1              lcd_cmd(0x83);
 240   1              lcd("SET ALARM");
 241   1              lcd_cmd(0xc3);
C51 COMPILER V9.06   ALARM_THERMO                                                          05/05/2012 11:24:07 PAGE 5   

 242   1              lcd_data_int(hr1);
 243   1              lcd_data(':');
 244   1              lcd_data_int(min1);
 245   1              while(alarm_set==0)
 246   1              {
 247   2                      delay(10);
 248   2                      if(dig_hr1==0)
 249   2                              set_alarm_hr1();
 250   2                      if(dig_min1==0)
 251   2                              set_alarm_min1();
 252   2              }
 253   1              
 254   1              if(am_pm==0)
 255   1              {
 256   2                      lcd_cmd(0xc8);
 257   2                      lcd_data_string("am");
 258   2                      alarm_am_pm=0;
 259   2              }
 260   1              
 261   1              if(am_pm==1)
 262   1              {
 263   2                      lcd_cmd(0xc8);
 264   2                      lcd_data_string("pm");
 265   2                      alarm_am_pm=1;
 266   2              }
 267   1              delay(200);
 268   1              lcd_cmd(0x01);
 269   1              lcd_cmd(0x83);
 270   1              lcd("SET TIMING");
 271   1              lcd_cmd(0xc3);
 272   1              lcd_data_int(hr1);
 273   1              lcd_data(':');
 274   1              lcd_data_int(min1);
 275   1              while(start==0)
 276   1              {
 277   2                      delay(10);
 278   2                      if(dig_hr1==0)
 279   2                              set_hr1();
 280   2                      if(dig_min1==0)
 281   2                              set_min1(); 
 282   2              }
 283   1              
 284   1              if(am_pm==0)
 285   1              {
 286   2                      lcd_cmd(0xc8);
 287   2                      lcd_data_string("am");
 288   2                      dig_am_pm=0;
 289   2              }
 290   1              
 291   1              if(am_pm==1)
 292   1              {
 293   2                      lcd_cmd(0xc8);
 294   2                      lcd_data_string("pm");
 295   2                      dig_am_pm=1;
 296   2              }
 297   1              delay(200);
 298   1              lcd_cmd(0x01);
 299   1              while(1)
 300   1              {
 301   2                      for(k=0;k<2;k++)
 302   2                      {
 303   3                              for(hr=hr1;hr<12;hr++)
C51 COMPILER V9.06   ALARM_THERMO                                                          05/05/2012 11:24:07 PAGE 6   

 304   3                              {
 305   4                                      for(min=min1;min<60;min++)
 306   4                                      {
 307   5                                              for(sec=0;sec<60;sec++)
 308   5                                              {
 309   6                                                      lcd_cmd(0x81);
 310   6                                                      delay(1);
 311   6                                                      lcd_data_int(hr);
 312   6                                                      lcd_data(':');
 313   6                                                      lcd_data_int(min);
 314   6                                                      lcd_data(':');
 315   6                                                      lcd_data_int(sec);
 316   6                                                      if(dig_am_pm==0)
 317   6                                                      {
 318   7                                                              lcd("am");
 319   7                                                      }
 320   6                                                      else
 321   6                                                      {
 322   7                                                              lcd("pm");
 323   7                                                      }
 324   6                                                      alarm_check();
 325   6                                                      lcd_cmd(0xc3); 
 326   6                                                      delay(2);
 327   6                                                      lcd_data_string("TEMP:");
 328   6                                                      temp();
 329   6                                                      lcd_data_string("    ");
 330   6                                              }
 331   5                                      }
 332   4                                      min1=0;
 333   4                              }
 334   3                              if(dig_am_pm==0)
 335   3                                      dig_am_pm=1;
 336   3                              else
 337   3                                      dig_am_pm=0;
 338   3                              hr1=0;
 339   3                      }
 340   2              }
 341   1      }
*** WARNING C290 IN LINE 75 OF alarm_thermo.c: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1336    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     48      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
